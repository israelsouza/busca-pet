import getConnection  from "./connectionOracle";

/**
 * LOGICA
 * 
 *  Buscar o ID do Estado:
    Use a sigla do estado enviada pelo frontend para buscar o EST_ID correspondente na tabela ESTADO.
    
    Inserir na Tabela CIDADE:
    Insira a cidade, vinculando ao EST_ID obtido no passo anterior.

    Inserir na Tabela ENDERECO:
    Insira o endereço, vinculando ao CID_ID da cidade inserida.

    Inserir na Tabela PESSOA:
    Insira os dados da pessoa, vinculando ao END_ID do endereço inserido.

    Inserir na Tabela USUARIO:
    Insira o e-mail e a senha, vinculando ao PES_ID da pessoa inserida.
 * 

    CRIAÇÃO DE TABELAS E INSERTS PRO ESTADO
 */

// CREATE TABLE ESTADO (
//     EST_ID          NUMBER	GENERATED BY DEFAULT AS IDENTITY        PRIMARY KEY,
//     EST_SIGLA       CHAR(2)     NOT NULL
// )

// CREATE TABLE CIDADE (
//     CID_ID          NUMBER	GENERATED BY DEFAULT AS IDENTITY        PRIMARY KEY,
//     CID_DESCRICAO   VARCHAR(35) NOT NULL,

//     EST_ID          NUMBER,
//     FOREIGN KEY (EST_ID) REFERENCES ESTADO(EST_ID)
// )

// CREATE TABLE ENDERECO (
//     END_ID          NUMBER	GENERATED BY DEFAULT AS IDENTITY        PRIMARY KEY,
//     END_RUA         VARCHAR(120) NOT NULL, 
//     END_BAIRRO      VARCHAR(120) NOT NULL, 
//     END_CEP         CHAR(8) NOT NULL, 

//     CID_ID          NUMBER,
//     FOREIGN KEY (CID_ID) REFERENCES CIDADE(CID_ID)
// )



// CREATE TABLE USUARIO (
//     USU_ID          NUMBER	GENERATED BY DEFAULT AS IDENTITY        PRIMARY KEY,    
//     USU_EMAIL       VARCHAR(70) NOT NULL,
//     USU_SENHA       VARCHAR(30) NOT NULL,

//     PES_ID          NUMBER,
//     FOREIGN KEY (PES_ID) REFERENCES PESSOA(PES_ID),

//     CONSTRAINT UK_USU_EMAIL UNIQUE (USU_EMAIL)
// )

// CREATE TABLE PET (
//     PET_ID          NUMBER	GENERATED BY DEFAULT AS IDENTITY        PRIMARY KEY, 
//    -- PET_TIPO        -- como existem varios tipos, vai se tornar outra table
//     PET_DESCRICAO   VARCHAR(150) NOT NULL,
//     PET_LOCAL       VARCHAR(100) NOT NULL,
//     PET_FOTO        VARCHAR2(150) NOT NULL,
//     PET_NOME        VARCHAR(70),
//     PET_RGA         VARCHAR(70),
//     PET_DATA        DATE
// )

// CREATE TABLE POST (
//     POS_ID          NUMBER	GENERATED BY DEFAULT AS IDENTITY        PRIMARY KEY,               
//     POS_TIPO        VARCHAR(15) NOT NULL,    
//     POS_DATA        DATE NOT NULL,

//     PES_ID          NUMBER,
//     FOREIGN KEY (PES_ID) REFERENCES PESSOA(PES_ID),

//     END_ID          NUMBER,
//     FOREIGN KEY (END_ID) REFERENCES ENDERECO(END_ID)
// )

// CREATE TABLE PESSOA (
//     PES_ID          NUMBER	GENERATED BY DEFAULT AS IDENTITY        PRIMARY KEY IDENTITY(1,1),
//     PES_NOME        VARCHAR(70) NOT NULL,
//     PES_PHONE       CHAR(11) NOT NULL,

//     CONSTRAINT UK_PES_PHONE UNIQUE (PES_PHONE),

//     END_ID          NUMBER,
//     FOREIGN KEY (END_ID) REFERENCES ENDERECO(END_ID)
// );

// INSERT INTO ESTADO (EST_SIGLA) VALUES ('AC');
// INSERT INTO ESTADO (EST_SIGLA) VALUES ('AL');
// INSERT INTO ESTADO (EST_SIGLA) VALUES ('AP');
// INSERT INTO ESTADO (EST_SIGLA) VALUES ('AM');
// INSERT INTO ESTADO (EST_SIGLA) VALUES ('BA');
// INSERT INTO ESTADO (EST_SIGLA) VALUES ('CE');
// INSERT INTO ESTADO (EST_SIGLA) VALUES ('DF');
// INSERT INTO ESTADO (EST_SIGLA) VALUES ('ES');
// INSERT INTO ESTADO (EST_SIGLA) VALUES ('GO');
// INSERT INTO ESTADO (EST_SIGLA) VALUES ('MA');
// INSERT INTO ESTADO (EST_SIGLA) VALUES ('MT');
// INSERT INTO ESTADO (EST_SIGLA) VALUES ('MS');
// INSERT INTO ESTADO (EST_SIGLA) VALUES ('MG');
// INSERT INTO ESTADO (EST_SIGLA) VALUES ('PA');
// INSERT INTO ESTADO (EST_SIGLA) VALUES ('PB');
// INSERT INTO ESTADO (EST_SIGLA) VALUES ('PR');
// INSERT INTO ESTADO (EST_SIGLA) VALUES ('PE');
// INSERT INTO ESTADO (EST_SIGLA) VALUES ('PI');
// INSERT INTO ESTADO (EST_SIGLA) VALUES ('RJ');
// INSERT INTO ESTADO (EST_SIGLA) VALUES ('RN');
// INSERT INTO ESTADO (EST_SIGLA) VALUES ('RS');
// INSERT INTO ESTADO (EST_SIGLA) VALUES ('RO');
// INSERT INTO ESTADO (EST_SIGLA) VALUES ('RR');
// INSERT INTO ESTADO (EST_SIGLA) VALUES ('SC');
// INSERT INTO ESTADO (EST_SIGLA) VALUES ('SP');
// INSERT INTO ESTADO (EST_SIGLA) VALUES ('SE');
// INSERT INTO ESTADO (EST_SIGLA) VALUES ('TO');

export default async function inserirUsuario(dados) {
  let connection;

  try {
    connection = await getConnection()

    await connection.execute("BEGIN")

    // validação de chave unica

    // 1. Verificar se o e-mail já existe
    const emailQuery = `SELECT USU_ID FROM USUARIO WHERE USU_EMAIL = :email`;
    const emailResult = await connection.execute(emailQuery, { email: dados.email });

    if (emailResult.rows.length > 0) {
      throw new Error("O e-mail já está cadastrado.");
    }

    // 2. Verificar se o telefone já existe
    const phoneQuery = `SELECT PES_ID FROM PESSOA WHERE PES_PHONE = :phone`;
    const phoneResult = await connection.execute(phoneQuery, { phone: dados.phone });

    if (phoneResult.rows.length > 0) {
      throw new Error("O telefone já está cadastrado.");
    }

    // inserção dos dados

    // 1. Buscar o ID do estado
    const estadoQuery = `SELECT EST_ID FROM ESTADO WHERE EST_SIGLA = :estado`;
    const estadoResult = await connection.execute(estadoQuery, { estado: dados.estado });
    const estadoId = estadoResult.rows[0][0];

    // 2. Inserir na tabela CIDADE
    const cidadeQuery = `
      INSERT INTO CIDADE (CID_DESCRICAO, EST_ID)
      VALUES (:cidade, :estadoId)
      RETURNING CID_ID INTO :cidadeId
    `;
    const cidadeResult = await connection.execute(cidadeQuery, {
      cidade: dados.cidade,
      estadoId,
    });
    const cidadeId = cidadeResult.outBinds.cidadeId[0];

    // 3. Inserir na tabela ENDERECO
    const enderecoQuery = `
      INSERT INTO ENDERECO (END_RUA, END_BAIRRO, END_CEP, CID_ID)
      VALUES (:rua, :bairro, :cep, :cidadeId)
      RETURNING END_ID INTO :enderecoId
    `;
    const enderecoResult = await connection.execute(enderecoQuery, {
      rua: dados.rua,
      bairro: dados.bairro,
      cep: dados.cep,
      cidadeId,
    });
    const enderecoId = enderecoResult.outBinds.enderecoId[0];

    // 4. Inserir na tabela PESSOA
    const pessoaQuery = `
      INSERT INTO PESSOA (PES_NOME, PES_PHONE, END_ID)
      VALUES (:nome, :phone, :enderecoId)
      RETURNING PES_ID INTO :pessoaId
    `;
    const pessoaResult = await connection.execute(pessoaQuery, {
      nome: dados.nome,
      phone: dados.phone,
      enderecoId,
    });
    const pessoaId = pessoaResult.outBinds.pessoaId[0];

    // 5. Inserir na tabela USUARIO
    const usuarioQuery = `
      INSERT INTO USUARIO (USU_EMAIL, USU_SENHA, PES_ID)
      VALUES (:email, :senha, :pessoaId)
    `;
    await connection.execute(usuarioQuery, {
      email: dados.email,
      senha: dados.senha,
      pessoaId,
    });

    // Confirma a transação
    await connection.execute("COMMIT");

    console.log("Usuário inserido com sucesso!");
    

  } catch (error) {
    // Reverte a transação em caso de erro
    if (connection) {
        await connection.execute("ROLLBACK");
      }
      console.error("Erro ao inserir usuário:", err);
      throw err;
  } finally {
    // Fecha a conexão
    if (connection) {
      await connection.close();
    }
  }

}